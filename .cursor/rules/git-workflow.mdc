---
description: 
globs: 
alwaysApply: false
---
# Git Workflow Guidelines

## 分支管理

### 主要分支
- `master`: 主分支，用于生产环境部署
- `develop`: 开发分支，用于开发环境部署
- `release/*`: 发布分支，用于预发布环境测试
- `feature/*`: 功能分支，用于新功能开发
- `hotfix/*`: 热修复分支，用于生产环境紧急修复

### 分支命名规范
1. 功能分支：`feature/模块名-功能描述`
2. 修复分支：`hotfix/模块名-问题描述`
3. 发布分支：`release/版本号`

## 提交规范

### 提交信息格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

### Type 类型
- `feature`: 新功能
- `fix`: 修复 Bug
- `docs`: 文档变更
- `style`: 代码格式调整
- `refactor`: 代码重构
- `perf`: 性能优化
- `test`: 测试相关
- `build`: 构建相关
- `ci`: CI 配置相关
- `chore`: 其他修改

### Scope 范围
- 用模块名称
- 如果修改影响多个模块，使用 * 

### Subject 描述
- 使用祈使句（动词开头）
- 第一个字母小写
- 结尾不加句号

### Body 正文
- 使用祈使句
- 说明代码变动的动机，以及与以前行为的对比

### Footer 页脚
- Breaking Changes
- Closed Issues

## 工作流程

### 功能开发
1. 从 `develop` 分支创建功能分支
2. 在功能分支上进行开发
3. 完成开发后提交 Pull Request 到 `develop` 分支
4. 代码评审通过后合并

### 发布流程
1. 从 `develop` 分支创建发布分支
2. 在发布分支上进行测试和 Bug 修复
3. 测试通过后合并到 `master` 和 `develop` 分支
4. 在 `master` 分支上打 Tag

### 热修复流程
1. 从 `master` 分支创建热修复分支
2. 在热修复分支上进行修复
3. 修复完成后合并到 `master` 和 `develop` 分支
4. 在 `master` 分支上打 Tag

## 代码评审

### 评审重点
1. 代码是否符合项目规范
2. 是否有潜在的性能问题
3. 是否有安全漏洞
4. 是否有充分的测试覆盖
5. 提交信息是否规范

### 评审流程
1. 开发者提交 Pull Request
2. 至少一名团队成员进行评审
3. 评审通过后由项目维护者合并
4. 合并后删除特性分支
