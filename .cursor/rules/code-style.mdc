---
description:
globs:
alwaysApply: false
---
# Code Style Guidelines

## Java 编码规范

### 命名规范
1. 类名使用 UpperCamelCase 风格
2. 方法名、参数名、成员变量、局部变量使用 lowerCamelCase 风格
3. 常量命名全部大写，单词间用下划线隔开
4. 抽象类命名使用 Abstract 开头
5. 异常类命名使用 Exception 结尾
6. 测试类命名以它要测试的类的名称开始，以 Test 结尾

### 注释规范
1. 类、类属性、类方法的注释必须使用 Javadoc 规范
2. 所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释
3. 方法内部单行注释，在被注释语句上方另起一行使用 //
4. 方法内部多行注释使用 /* */
5. 所有的枚举类型字段必须要有注释，说明每个数据项的用途

### 日志规范
1. 使用 SLF4J 框架记录日志
2. 日志文件推荐命名为 ${applicationName}_${fileName}.log
3. 异常信息应该包括两类信息：案发现场信息和异常堆栈信息
4. 日志级别的使用：
   - ERROR：系统级别异常
   - WARN：业务级别异常
   - INFO：业务流程关键节点
   - DEBUG：调试信息
   
### 异常处理
1. 不要捕获 Exception，要捕获特定异常
2. 不要生吞异常，必须记录日志
3. 抛出异常时，必须带上明确的异常信息
4. 在 finally 块中清理资源

### OOP 规约
1. 所有的覆写方法必须加 @Override 注解
2. 所有的局部变量、参数和成员变量都必须添加 final 修饰符（除非需要修改）
3. 类成员与方法访问控制从严：
   - 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private
   - 工具类不允许有 public 或 default 构造方法
   - 类属性必须是 private 的，通过 getter/setter 访问

### 集合处理
1. 判断所有集合内部的元素是否为空，使用 isEmpty()
2. 使用集合转数组的方法，必须使用集合的 toArray(T[] array)
3. 使用工具类 Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法
4. 不要在 foreach 循环里进行元素的 remove/add 操作

### 并发处理
1. 创建线程或线程池时请指定有意义的线程名称
2. 线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式
3. SimpleDateFormat 是线程不安全的类，必须确保线程安全
4. 高并发时，同步调用应该去考量锁的性能损耗，能用无锁数据结构，就不要用锁

### 其他规约
1. 所有的 POJO 类属性必须使用包装数据类型
2. 序列化类新增属性时，请不要修改 serialVersionUID 字段
3. 方法的参数和返回值，尽量使用接口而不是实现类
4. 优先使用 JDK 提供的 API，避免使用 Apache Beanutils 等反射类库
